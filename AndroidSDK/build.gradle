apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'
jacoco {
    toolVersion = '0.7.1.201405082137'
}

def COMPILE_SDK_VERSION = 26
def BUILD_TOOLS_VERSION = '26.0.1'
def SUPPORT_LIBRARY_VERSION = '26.1.0'

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}

dependencies {
    // Compile dependencies will be added as dependency in pom file.
    //noinspection GradleDynamicVersion
    compile "com.android.support:support-v4:[22.0.0,${SUPPORT_LIBRARY_VERSION}]"
    //noinspection GradleDynamicVersion
    compile "com.android.support:appcompat-v7:[22.0.0,${SUPPORT_LIBRARY_VERSION}]"

    // Provided dependencies are optional dependencies and will not show up in pom file.
    provided('com.google.android.gms:play-services-gcm:[8.3.0,)') {
        exclude module: 'support-v4'
    }
    provided('com.google.firebase:firebase-messaging:[10.0.0,)') {
        exclude module: 'support-v4'
    }
    provided('com.google.android.gms:play-services-location:[10.0.0,)') {
        exclude module: 'support-v4'
    }

    // Dependencies used for unit tests.
    testCompile 'junit:junit:4.12'
    testCompile('org.robolectric:robolectric:3.4.2') {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
    testCompile 'org.robolectric:shadows-play-services:3.3.2'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.powermock:powermock-module-junit4:1.6.6'
    testCompile 'org.powermock:powermock-module-junit4-rule:1.6.6'
    testCompile 'org.powermock:powermock-api-mockito:1.6.6'
    testCompile 'org.powermock:powermock-classloading-xstream:1.6.6'
    testCompile 'org.bouncycastle:bcmail-jdk15on:1.54'
    testCompile 'com.google.android.gms:play-services-location:11.4.2'
    testCompile 'com.google.android.gms:play-services-gcm:11.4.2'
}

android {
    compileSdkVersion COMPILE_SDK_VERSION
    buildToolsVersion BUILD_TOOLS_VERSION
    useLibrary 'org.apache.http.legacy'
    publishNonDefault true

    defaultConfig {
        consumerProguardFiles 'consumer-proguard-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles 'proguard-rules.pro'

        }
        debug {
            testCoverageEnabled = true
        }
        buildTypes.each {
            def packageIdentifier = '\"' + (System.getenv("LEANPLUM_PACKAGE_IDENTIFIER") ?: "s") +
                    '\"'
            it.buildConfigField 'String', 'LEANPLUM_PACKAGE_IDENTIFIER', packageIdentifier
        }
    }
    sourceSets {
        debug {
            res.srcDirs = ['src/debug/res', 'src/debug/res/']
            assets.srcDirs = ['src/debug/assets', 'src/debug/assets/']
        }
    }
}

task generateJavadoc(type: Javadoc) {
    exclude 'com/leanplum/internal'
    exclude 'com/leanplum/messagetemplates'
    exclude 'com/leanplum/utils'
    exclude 'com/leanplum/views'
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file("./javadoc/")
    failOnError false
}

def libraryGroupId = 'com.leanplum'
def libraryArtifactId = 'Leanplum'
def libraryVersion = "$System.env.ANDROID_VERSION_STRING"

task makeJar(type: Copy) {
    from('build/intermediates/bundles/release/')
    into('build/outputs/jar/')
    include('classes.jar')
    rename('classes.jar', 'AndroidSDK-release.jar')
}

publishing {
    publications {
        aar(MavenPublication) {
            groupId libraryGroupId
            version libraryVersion
            artifactId libraryArtifactId

            artifact("$buildDir/outputs/aar/AndroidSDK-release.aar")

            // The publication doesn't know about our dependencies,
            // so we have to manually add them to the pom.
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                // Iterate over the compile dependencies (we don't want the test ones),
                // adding a <dependency> node for each.
                configurations.compile.allDependencies.each {
                    if (it.group != null && it.name != null) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
        jar(MavenPublication) {
            groupId libraryGroupId
            version libraryVersion
            artifactId libraryArtifactId

            artifact("$buildDir/outputs/jar/AndroidSDK-release.jar")

            // The publication doesn't know about our dependencies,
            // so we have to manually add them to the pom.
            pom.withXml {
                asNode().appendNode('packaging', 'aar') // Default to aar packaging.
                def dependenciesNode = asNode().appendNode('dependencies')

                // Iterate over the compile dependencies (we don't want the test ones),
                // adding a <dependency> node for each.
                configurations.compile.allDependencies.each {
                    if (it.group != null && it.name != null) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

if (project.hasProperty('artifactoryUsername') && project.hasProperty('artifactoryPassword')) {
    artifactory {
        contextUrl = 'http://artifactory-upload.leanplum.com'
        publish {
            repository {
                repoKey = 'libs-snapshot-local'

                username = artifactoryUsername
                password = artifactoryPassword
            }
            defaults {
                publications('aar', 'jar')
                publishArtifacts = true

                properties = ['qa.level': 'basic', 'q.os': 'android', 'dev.team': 'core']
                publishPom = true
            }
        }
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
    group 'reporting'
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/*Activity*.*', '**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = files("${buildDir}/jacoco/testDebugUnitTest.exec")
}
