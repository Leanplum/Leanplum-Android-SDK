// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        mavenCentral()
        jcenter()
        google()
    }
    dependencies {
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.4.12'
        classpath 'com.android.tools.build:gradle:3.0.0'
    }
}

allprojects {
    repositories {
        mavenCentral()
        jcenter()
        google()
        maven {
            url "https://repo.leanplum.com/"
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

subprojects {
    apply plugin: 'com.jfrog.artifactory'
    apply plugin: 'maven-publish'

    ext.COMPILE_SDK_VERSION = 27
    ext.BUILD_TOOLS_VERSION = '27.0.2'
    ext.SUPPORT_LIBRARY_VERSION='27.0.2'

    ext.PROGUARD_FILES = 'proguard-rules.pro'
    ext.CONSUMER_PROGUARD_FILES = 'consumer-proguard-rules.pro'

    // Only used by subprojects, and depends on variables defined inside subprojects.
    afterEvaluate {
        def libraryGroupId = 'com.leanplum'
        def libraryVersion = "$System.env.ANDROID_VERSION_STRING"

        if (project.hasProperty('javadocSource')) {
            task generateJavadoc(type: Javadoc) {
                exclude javadocExcludes
                source = javadocSource
                classpath += javadocClassPath
                destinationDir = file("./javadoc/")
                failOnError false
            }
        }

        if (project.hasProperty('packageName')) {
            task makeJar(type: Copy) {
                from('build/intermediates/bundles/release/')
                into('build/outputs/jar/')
                include('classes.jar')
                rename('classes.jar', packageName + ".jar")
            }

            publishing.publications {
                aar(MavenPublication) {
                    groupId libraryGroupId
                    version libraryVersion
                    artifactId libraryArtifactId

                    artifact("$buildDir/outputs/aar/" + packageName + ".aar")

                    // The publication doesn't know about our dependencies,
                    // so we have to manually add them to the pom.
                    pom.withXml {
                        def dependenciesNode = asNode().appendNode('dependencies')

                        // Iterate over the compile dependencies (we don't want the test ones),
                        // adding a <dependency> node for each.
                        configurations.api.allDependencies.each {
                            if (it.group != null && it.name != null) {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)
                            }
                        }
                    }
                }
                jar(MavenPublication) {
                    groupId libraryGroupId
                    version libraryVersion
                    artifactId libraryArtifactId

                    artifact("$buildDir/outputs/jar/" + packageName + ".jar")

                    // The publication doesn't know about our dependencies,
                    // so we have to manually add them to the pom.
                    pom.withXml {
                        asNode().appendNode('packaging', 'aar') // Default to aar packaging.
                        def dependenciesNode = asNode().appendNode('dependencies')

                        // Iterate over the compile dependencies (we don't want the test ones),
                        // adding a <dependency> node for each.
                        configurations.api.allDependencies.each {
                            if (it.group != null && it.name != null) {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)
                            }
                        }
                    }
                }
            }

            if (project.hasProperty('artifactoryUsername') && project.hasProperty('artifactoryPassword')) {
                artifactory {
                    contextUrl = 'http://artifactory-upload.leanplum.com'
                    publish {
                        repository {
                            repoKey = 'libs-snapshot-local'

                            username = artifactoryUsername
                            password = artifactoryPassword
                        }
                        defaults {
                            publications('aar', 'jar')
                            publishArtifacts = true

                            properties = ['qa.level': 'basic', 'q.os': 'android', 'dev.team': 'core']
                            publishPom = true
                        }
                    }
                }
            }
        }
    }
}
